import { Constants } from "../commonstrings.js";
import { GameModeGetCollectibles } from "../gameModes.js";
import { Grid } from "../grid.js";
import { GridObject } from "../gridobject.js";

jest.mock("../grid_data.js", () => {
    return {
        GridData: jest.fn().mockImplementation(() => {
            return {
                remove: () => {},
                reset: () => {},
                add: () => {}
            };
        }),
    };
});

jest.mock("../uuid_generator.js", () => {
    return {
        getRandomUUID: () => { return "12334232874329";},
    };
});

describe('GameMode testing from gameModes.js', () => {
    let grid;
    let player;

    beforeEach(() => {
        player = new GridObject("pupu");
        grid = new Grid(player, 2, 2);
        let collectible = new GridObject(Constants.COLLECTIBLE);
        grid.addToGrid(player, 0, 0);

        //Mock grid object jonnekkin tÃ¤nne??!?!?

        grid.addToGrid(collectible, 0, 1);
        grid.saveCurrentStateForReset(); //Important!
        const collectibles = { total: 1, current: 0 };
        //globals.collectibles.mockReturnValue(collectibles);
    });

    test('Can win game mode "GameModeGetCollectibles"', () => {
        let gameMode = new GameModeGetCollectibles(grid);
        gameMode.eventTarget.dispatchEvent = jest.fn();
        gameMode.eventTarget.addEventListener("victory", victory);
        expect(gameMode.eventTarget.dispatchEvent).toHaveBeenCalledWith(new Event("victory"));
    });


});
