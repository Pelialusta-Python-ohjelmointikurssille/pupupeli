{
    "description": [
      "Ultimate python debug string"
    ],
    "editorCode": [
        "# Arithmetic operations",
        "a = 10",
        "b = 3",
        "c = a + b",
        "d = a - b",
        "e = a * b",
        "f = a / b",
        "g = a // b",
        "h = a % b",
        "i = a ** b",
        "",
        "# Comparison operators",
        "j = a > b",
        "k = a < b",
        "l = a == b",
        "m = a != b",
        "n = a >= b",
        "o = a <= b",
        "",
        "# Logical operations",
        "p = j and k",
        "q = j or k",
        "r = not j",
        "",
        "# Bitwise operations",
        "s = a & b",
        "t = a | b",
        "u = a ^ b",
        "v = ~a",
        "w = a << 2",
        "x = a >> 2",
        "",
        "# Membership operations",
        "y = 2 in [1, 2, 3]",
        "z = 4 not in [1, 2, 3]",
        "",
        "# Identity operations",
        "aa = a is b",
        "ab = a is not b",
        "",
        "# List operations",
        "lst = [1, 2, 3]",
        "lst.append(4)",
        "ac = len(lst)",
        "ad = lst[1]",
        "lst[1] = 5",
        "ae = lst.pop()",
        "",
        "# Tuple operations",
        "tup = (1, 2, 3)",
        "af = tup[1]",
        "",
        "# Dictionary operations",
        "dic = {'key1': 'value1', 'key2': 'value2'}",
        "ag = dic['key1']",
        "dic['key3'] = 'value3'",
        "ah = dic.keys()",
        "ai = dic.values()",
        "aj = dic.items()",
        "ak = dic.get('key2')",
        "",
        "# Set operations",
        "st = {1, 2, 3}",
        "st.add(4)",
        "al = len(st)",
        "st.remove(3)",
        "am = 2 in st",
        "an = st.union({5, 6})",
        "ao = st.intersection({2, 4, 5})",
        "",
        "# String operations",
        "str1 = \"Hello\"",
        "str2 = \"World\"",
        "ap = str1 + \" \" + str2",
        "aq = str1 * 3",
        "ar = len(str1)",
        "as_ = str1[1:4]",
        "at = str1.lower()",
        "au = str1.upper()",
        "av = str1.startswith(\"He\")",
        "aw = str1.endswith(\"lo\")",
        "",
        "# Function definition and call",
        "def add(x, y):",
        "    return x + y",
        "",
        "ax = add(a, b)",
        "",
        "# Lambda function",
        "ay = (lambda x, y: x * y)(a, b)",
        "",
        "# If-else statement",
        "if a > b:",
        "    az = \"a is greater than b\"",
        "else:",
        "    az = \"a is not greater than b\"",
        "",
        "# Loop operations",
        "lst2 = []",
        "for i in range(5):",
        "    lst2.append(i * i)",
        "",
        "ba = 0",
        "while ba < 5:",
        "    ba += 1",
        "",
        "# Exception handling",
        "try:",
        "    bb = a / 0",
        "except ZeroDivisionError:",
        "    bb = \"Division by zero error\"",
        "",
        "# List comprehension",
        "bc = [i * 2 for i in range(5)]",
        "",
        "# Dictionary comprehension",
        "bd = {i: i * i for i in range(5)}",
        "",
        "# Set comprehension",
        "be = {i * 2 for i in range(5)}",
        "",
        "# Generator expression",
        "gen = (i * 2 for i in range(5))",
        "bf = list(gen)",
        "",
        "# Map, filter, reduce",
        "from functools import reduce",
        "bg = list(map(lambda x: x * x, lst2))",
        "bh = list(filter(lambda x: x > 2, lst2))",
        "bi = reduce(lambda x, y: x + y, lst2)",
        "",
        "# Printing outputs (for verification purposes)",
        "print(\"Arithmetic operations:\", c, d, e, f, g, h, i)",
        "print(\"Comparison operations:\", j, k, l, m, n, o)",
        "print(\"Logical operations:\", p, q, r)",
        "print(\"Bitwise operations:\", s, t, u, v, w, x)",
        "print(\"Membership operations:\", y, z)",
        "print(\"Identity operations:\", aa, ab)",
        "print(\"List operations:\", lst, ac, ad, ae)",
        "print(\"Tuple operations:\", tup, af)",
        "print(\"Dictionary operations:\", dic, ag, ah, ai, aj, ak)",
        "print(\"Set operations:\", st, al, am, an, ao)",
        "print(\"String operations:\", ap, aq, ar, as_, at, au, av, aw)",
        "print(\"Function operations:\", ax, ay)",
        "print(\"If-else statement:\", az)",
        "print(\"Loop operations:\", lst2, ba)",
        "print(\"Exception handling:\", bb)",
        "print(\"List comprehension:\", bc)",
        "print(\"Dictionary comprehension:\", bd)",
        "print(\"Set comprehension:\", be)",
        "print(\"Generator expression:\", bf)",
        "print(\"Map, filter, reduce:\", bg, bh, bi)"
      ],
    "multipleChoiceQuestions": [],
    "grid": [
    [0,2,1,1,1,1,1,1],
    [1,3,3,3,3,1,1,1],
    [1,3,1,1,1,1,1,1],
    [1,3,3,3,1,1,1,1],
    [1,1,1,1,3,1,1,1],
    [1,1,1,1,3,1,1,1],
    [1,3,3,3,1,1,1,1],
    [1,1,1,1,1,1,1,1]
      ],
    "conditions": []
  }